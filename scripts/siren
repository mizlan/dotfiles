#!/usr/bin/env bash

#
# Requires:
# - youtube-dl
# - a filter (e.g. fzf)
#   - it should support streaming of input
# - jq

# TODO: use XDG directories for these
ROOT_DIR="$HOME/siren"
SONG_DIR="$ROOT_DIR/songs"
INFO_DIR="$ROOT_DIR/cache"
FILTER="fzf"
MULTI_FILTER="fzf -m"
PLAYER="afplay"

setup_dirs() {
  mkdir -p "$ROOT_DIR"
  mkdir -p "$SONG_DIR"
  mkdir -p "$INFO_DIR"
}

shopt -s nullglob

add_song() {
  song_id="$1"
  if [ -z "$song_id" ]; then
    printf "no song ID given, exiting\n"; exit 1
  fi
  dest="${SONG_DIR}/%(id)s.%(ext)s"
  youtube-dl --no-playlist -f 'bestaudio[ext=m4a]' --write-info-json -o "$dest" "$song_id"
}

_gen_id_list() {
  for song in "$SONG_DIR"/*.m4a; do
    printf "%s\n" "$(basename "$song" .m4a)"
  done
}

_gen_song_list() {
  for song_id in $(_gen_id_list); do
    cached_info="$INFO_DIR"/"$song_id"
    [ -e "$cached_info" ] || {
      # NOTE: cache the info
      info_file="$SONG_DIR"/"$song_id".info.json
      title=$(jq -r '.title' < "$info_file")
      uploader=$(jq -r '.uploader' < "$info_file")
      printf "%s uploaded by %s [id:%s]\n" "$title" "$uploader" "$song_id" > "$cached_info"
    }
    cat "$cached_info"
  done
}

_query_song_id() {
  if ! entry=$(_gen_song_list | "$FILTER"); then
    printf "no song chosen\n"
    exit 1
  fi
  id=$(echo "$entry" | grep -E '\[id:[A-Za-z0-9_-]+\]' | sed 's/.*\[id://; s/\]$//')
  echo "$id"
}

_query_multi_song_id() {
  _gen_song_list | \
    $MULTI_FILTER | \
    grep -E '\[id:[A-Za-z0-9_-]+\]' | \
    sed 's/.*\[id://; s/\]$//'
}

delete_song() {
  id=$(_query_song_id) || exit 1
  [ -n "$id" ] || { echo "no id"; exit 1; }
  rm -v "$SONG_DIR"/"$id"*
}

browse_songs() {
  # NOTE: use grep color to highlight ID
  _gen_song_list | \
    GREP_COLORS='ms=34' \
    GREP_COLOR='34' \
    grep -E --color=always '\[id:[A-Za-z0-9_-]+\]$'
}

play_song() {
  [ -n "$1" ] && id="$1" || id="$(_query_song_id)" || exit 1
  "$PLAYER" "$SONG_DIR"/"$id".m4a
}

play_multi() {
  for song in $(_query_multi_song_id); do
    play_song $song
  done
}

import_songs() {
  while read -r line; do
    add_song "$line"
  done < "${1:-/dev/stdin}"
}

read -r -d '' opts << EOF
setup
add-song
del-song
browse-songs
play-song
export
import
query
size
EOF

case "$1" in
  s|setup) setup_dirs ;;
  a|add|add-song) add_song "${@:2}" ;;
  d|del|del-song) delete_song "${@:2}" ;;
  b|browse|browse-songs) browse_songs "${@:2}" ;;
  p|play|play-song) play_song "${@:2}" ;;
  m|multi|multi-play) play_multi ;;
  e|export) _gen_id_list ;;
  i|import) import_songs "${@:2}" ;;
  q|query) _query_song_id ;;
  size) du -h "$ROOT_DIR" ;;
  *) echo $opts; exit 1 ;;
esac
